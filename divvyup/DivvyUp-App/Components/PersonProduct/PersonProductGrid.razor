@using DivvyUp_Shared.AppConstants
@using DivvyUp_Shared.Dtos.Entity
@using DivvyUp_App.BaseComponents.DLoadingPanel

<div class="h-100 w-100">
    <DLoadingPanel IsLoading="@IsLoading" Size="ProgressBarCircularSize.Medium"/>
    <RadzenDataGrid @ref="@Grid"
                    Data="@PersonProducts"
                    TItem="PersonProductDto"
                    AllowSorting="true"
                    AllowAlternatingRows="true"
                    FilterMode="FilterMode.Simple"
                    AllowFiltering="true"
                    LogicalFilterOperator="LogicalFilterOperator.Or"
                    AllowPaging="true"
                    PagerAlwaysVisible="true"
                    PageSize="10"
                    PageSizeOptions="@PageSizeOptions"
                    PagerHorizontalAlign="HorizontalAlign.Center"
                    ShowPagingSummary="true"
                    EditMode="DataGridEditMode.Single"
                    GridLines="DataGridGridLines.Both" 
                    SelectionMode="DataGridSelectionMode.Multiple"
                    @bind-Value="@SelectedPersonProducts"
                    AllowRowSelectOnRowClick="false">
        <HeaderTemplate>
            <div style="display: flex; align-items: center; flex-wrap: wrap; gap: 10px;">
                <RadzenButton ButtonStyle="ButtonStyle.Light" Icon="refresh" Text="Odśwież" Click="@LoadGrid" />
                <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="calculate" Text="Ustaw wyrównanie odpowiedniej osobie" Click="@SetAutoCompensation" Visible="@NormalView" />
                @if (NormalView)
                {
                    <div style="position: absolute; right: 10px;">
                        @* Pozostałe części: <b> @Product?.AvailableQuantity </b> *@
                        Kwota wyrównania: <b> @Product?.CompensationPrice.ToString(Format.PriceFormat) </b>
                    </div>
                }
            </div>

        </HeaderTemplate>
        <EmptyTemplate>
            <p style="color: lightgrey; font-size: 24px; text-align: center; margin: 2rem;">Brak wpisów</p>
        </EmptyTemplate>
        <Columns>
            <RadzenDataGridColumn Title="Zarządzanie" Width="15%" TextAlign="TextAlign.Center" Frozen="true" Sortable="false">
                <HeaderTemplate>
                    <RadzenButton Icon="add_circle" ButtonStyle="ButtonStyle.Success" Click="@InsertRow" Visible="@NormalView" />
                </HeaderTemplate>
                <Template Context="personProduct">
                    <RadzenCheckBox class="grid-button" TabIndex="-1" TriState="false" Value="@(SelectedPersonProducts != null && SelectedPersonProducts.Contains(personProduct))" InputAttributes="@(new Dictionary<string, object>() { { "aria-label", "Select item" } })"
                                    TValue="bool" Change=@(async (bool value) => { await ChangeSelected(personProduct, value); }) Visible="@(!NormalView)"/>
                    <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Secondary" Click="@((args) => EditRow(personProduct))" Visible="@NormalView"/>
                    <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Click="@((args) => RemoveRow(personProduct))" Visible="@NormalView"/>
                </Template>
                <EditTemplate Context="personProduct">
                    <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Click="@((args) => SaveRow(personProduct))"/>
                    <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Danger" Click="@(async (args) => await CancelEdit(personProduct))"/>
                </EditTemplate>
                <FilterTemplate>
                    <div class="rz-cell-data">
                        <RadzenButton Icon="filter_alt_off" ButtonStyle="ButtonStyle.Dark" Click="@(args => { Grid.Reset(); })"/>
                    </div>
                </FilterTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Property="@nameof(PersonProductDto.Settled)" Title="Rozliczono" Width="15%" TextAlign="TextAlign.Center" Frozen="true" Visible="@NormalView">
                <Template Context="personProduct">
                    <RadzenCheckBox class="grid-button" @bind-Value="@personProduct.Settled" Change="@(async (bool check) => await ChangeSettled(personProduct.Id, personProduct.Settled))" Disabled="@(!NormalView)" />
                </Template>
                <EditTemplate Context="personProduct">
                    <RadzenCheckBox style="opacity: 0.6; " class="grid-button" Value="@personProduct.Settled" ReadOnly="true" />
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Property="@nameof(PersonProductDto.Compensation)" Title="Wyrównanie" Width="15%" TextAlign="TextAlign.Center" Frozen="true" Visible="@NormalView">
                   <Template Context="personProduct">
                        <RadzenCheckBox class="grid-button" @bind-Value="@personProduct.Compensation" Change="@(async (bool check) => await ChangeCompensation(personProduct.Id))" ReadOnly="@(personProduct.Compensation)" />
                    </Template>
                   <EditTemplate Context="personProduct">
                       <RadzenCheckBox style="opacity: 0.6; " class="grid-button" Value="@personProduct.Compensation" ReadOnly="true" Visible="@NormalView"/>
                   </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Property="@nameof(PersonProductDto.Quantity)" Title="Liczba części" Width="15%" TextAlign="TextAlign.Center" Frozen="true">
                <Template Context="personProduct">
                    <div style="@(personProduct.Settled ? Format.IsSettledStyle : Format.IsNotSettledStyle)">
                        @($"{personProduct.Quantity}/{Product.MaxQuantity}")
                    </div>
                </Template>
                <EditTemplate Context="personProduct">
                    @if (personProduct.Quantity == 0)
                    {
                        personProduct.Quantity = @Product.AvailableQuantity;
                    }
                    <RadzenNumeric @bind-Value="@personProduct.Quantity" Min="1" Max="@(Product.AvailableQuantity + personProduct.Quantity)" Disabled="@(!NormalView)" />
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Property="@nameof(PersonProductDto.PartOfPrice)" Title="Cena" Width="15%" TextAlign="TextAlign.Center" Frozen="true">
                <Template Context="personProduct">

                    <div style="@(personProduct.Settled ? Format.IsSettledStyle : Format.IsNotSettledStyle); display: inline-block;">
                        <b>@personProduct.PartOfPrice.ToString(Format.PriceFormat)</b>
                        @if (personProduct.Compensation && Product.CompensationPrice != 0)
                        {
                            <div style="display: inline;"><b> + @Product.CompensationPrice.ToString(Format.PriceFormat)</b></div>
                        }
                    </div>
                </Template>
                <EditTemplate Context="personProduct">
                    -
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Property="@nameof(PersonProductDto.PersonId)" Title="Osoba" Width="25%" TextAlign="TextAlign.Center" Frozen="true">
                <Template Context="personProduct">
                    <RadzenDropDownDataGrid TValue="int"
                                            Value="@personProduct.PersonId"
                                            ValueChanged="async (int personId) => await OnPersonChange(personProduct, personId)"
                                            Data="@Persons"
                                            TextProperty="@nameof(PersonDto.FullName)"
                                            ValueProperty="@nameof(PersonDto.Id)"
                                            Style="width: 100%;" 
                                            Disabled="@(!NormalView)" 
                                            SearchTextPlaceholder="Nazwa"
                                            EmptyText="Brak dostępnych osób" />
                </Template>
                <EditTemplate Context="personProduct">
                    @{
                        if (personProduct.Id != 0)
                        {
                            if (!PeopleAvailable.Any(p => p.Id == personProduct.Person.Id))
                            {
                                PeopleAvailable.Add(personProduct.Person);
                            }
                        }
                        else if (personProduct.PersonId == 0 && PeopleAvailable.Any())
                        {
                            personProduct.PersonId = PeopleAvailable.First().Id;
                        }

                        <RadzenDropDownDataGrid
                            TValue="int"
                            @bind-Value="@personProduct.PersonId"
                            Data="@PeopleAvailable"
                            TextProperty="@nameof(PersonDto.FullName)"
                            ValueProperty="@nameof(PersonDto.Id)"
                            Style="width: 100%;"
                            Disabled="@(!NormalView)"
                            SearchTextPlaceholder="Nazwa"
                            EmptyText="Brak dostępnych osób"/>
                    }
                </EditTemplate>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
</div>