@using DivvyUp_Shared.AppConstants
@using DivvyUp_Shared.Dto

<RadzenDataGrid @ref="@Grid"
                Data="@Products"
                TItem="ProductDto"
                AllowSorting="true"
                AllowAlternatingRows="true"
                FilterMode="FilterMode.Simple"
                AllowFiltering="true"
                LogicalFilterOperator="LogicalFilterOperator.Or"
                AllowPaging="true"
                PagerAlwaysVisible="true"
                PageSize="10"
                PageSizeOptions="@PageSizeOptions"
                PagerHorizontalAlign="HorizontalAlign.Center"
                ShowPagingSummary="true"
                EditMode="DataGridEditMode.Single"
                GridLines="DataGridGridLines.Both">
    <HeaderTemplate>
        <RadzenButton ButtonStyle="ButtonStyle.Light" Icon="refresh" Text="Odśwież" Click="LoadGrid" />
        <RadzenButton ButtonStyle="ButtonStyle.Secondary" Icon="receipt_long" Text="Powrót do rachunków" Click="@(() => { Navigation.NavigateTo("/receipt"); } )" />
    </HeaderTemplate>
    <Columns>
        <RadzenDataGridColumn Title="Zarządzanie" Width="12%" TextAlign="TextAlign.Center" Frozen="true">
            <Template Context="product">
                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Secondary" Click="@((args) => EditRow(product))" />
                <RadzenButton Icon="content_copy" ButtonStyle="ButtonStyle.Info" Click="@((args) => Duplicate(product))" />
                <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Click="@((args) => RemoveRow(product))" />
            </Template>
            <EditTemplate Context="product">
                <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Click="@((args) => SaveRow(product))" />
                <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Danger" Click="@((args) => CancelEdit(product))" />
            </EditTemplate>
            <FilterTemplate>
                <div class="rz-cell-data">
                    <RadzenButton Icon="add_circle" ButtonStyle="ButtonStyle.Success" Click="@InsertRow" />
                    <RadzenButton Icon="filter_alt_off" ButtonStyle="ButtonStyle.Dark" Click="@(args => { Grid.Reset(); })" />
                </div>
            </FilterTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="@nameof(ProductDto.Settled)" Title="Rozliczono" Width="7%" TextAlign="TextAlign.Center" Frozen="true">
            <Template Context="product">
                <RadzenCheckBox class="button" @bind-Value="@product.Settled" Change="@(async (bool Check) => await ChangeSettled(product.Id, product.Settled))" />
            </Template>
            <EditTemplate Context="product">
                <RadzenCheckBox style="opacity: 0.6; " class="button" Value="@product.Settled" ReadOnly="true" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="@nameof(ProductDto.Name)" Title="Nazwa" Width="20%" TextAlign="TextAlign.Start" Frozen="true">
            <EditTemplate Context="product">
                <RadzenTextBox @bind-value="@product.Name" Style="width: 100%;" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="@nameof(ProductDto.Price)" Title="Kwota" Width="12%" TextAlign="TextAlign.Start" Frozen="true">
            <Template Context="product">
                <div style="color: @(product.Settled ? "green" : "red")">
                    <b>@product.Price.ToString((Format.PriceFormat))</b>
                </div>
            </Template>
            <EditTemplate Context="product">
                <RadzenNumeric @bind-Value="@product.Price" Style="width: 100%;" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="@nameof(ProductDto.Divisible)" Title="Podzielność" Width="7%" TextAlign="TextAlign.Center" Frozen="true">
            <Template Context="product">
                <RadzenButton ButtonStyle="@(ButtonStyle.Base)" Icon="@(product.Divisible ? "groups" : "person")" Click="@(() => { product.Divisible = !product.Divisible; })" Disabled="true" />
            </Template>
            <EditTemplate Context="product">
                <RadzenButton ButtonStyle="@(ButtonStyle.Base)" Icon="@(product.Divisible ? "groups" : "person")" Click="@(() => { product.Divisible = !product.Divisible; })" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="@nameof(ProductDto.MaxQuantity)" Title="Ilość częsci" Width="8%" TextAlign="TextAlign.Center" Frozen="true">
            <Template Context="product">
                @if (product.Divisible)
                {
                    @product.MaxQuantity
                }
                else
                {
                    <div>-</div>
                }
            </Template>
            <EditTemplate Context="product">
                @if (product.Divisible)
                {
                    <RadzenNumeric @bind-Value="@product.MaxQuantity" />
                }
                else
                {
                    product.MaxQuantity = 1;
                    <div>-</div>                    
                }
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="@nameof(ProductDto.CompensationPrice)" Title="Wyrównanie" Width="8%" TextAlign="TextAlign.Center" Frozen="true">
            <Template Context="product">
                @if (product.Divisible)
                {
                    @product.CompensationPrice.ToString(Format.PriceFormat)
                }
                else
                {
                    <div>-</div>
                }
            </Template>
            <EditTemplate>
                -
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="@nameof(ProductDto.Persons)" Title="Osoby" Width="15%" TextAlign="TextAlign.Center" Frozen="true">
            <Template Context="product">
                @if (product.Divisible)
                {
                    <RadzenButton Click="@(async () => { await ManagePerson(product.Id); })" Style="width: 100%;">
                        @if (product.Persons != null && product.Persons.Count() > 0)
                        {
                            <div style="display: flex; flex-direction: column;">
                                @foreach (var person in product.Persons)
                                {
                                    <div>@($"{person.Name} {person.Surname}")</div>
                                }
                            </div>
                        }
                    </RadzenButton>
                }
                else
                {
                    @if (product.Persons != null && product.Persons.Count() > 0)
                    {
                        PersonDto person = product.Persons.First();

                        <RadzenDropDownDataGrid TValue="PersonDto"
                                                Value="person"
                                                ValueChanged="async(PersonDto person) => await OnPersonChange(product.Id, person)"
                                                Data="@Persons"
                                                TextProperty="@nameof(PersonDto.FullName)" />
                    }
                }
            </Template>
            <EditTemplate Context="product">
                @if (Persons.Count > 0 && !product.Divisible)
                {
                    if (product.Id != 0 && product.Persons != null && product.Persons.Count() > 0)
                    {
                        PersonDto person = product.Persons.First();

                        <RadzenDropDownDataGrid TValue="PersonDto"
                                                Value="@person"
                                                ValueChanged="async(PersonDto person) => await OnPersonChange(product.Id, person)"
                                                Data="@Persons"
                                                TextProperty="@nameof(PersonDto.FullName)" />
                    }
                    else
                    {
                        <RadzenDropDownDataGrid TValue="PersonDto"
                                                Value="@SelectedPerson"
                                                ValueChanged="OnPersonSet"
                                                Data="@Persons"
                                                TextProperty="@nameof(PersonDto.FullName)" />
                    }
                }
            </EditTemplate>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

<style>
    .button {
        width: 36px;
        height: 36px;
    }

    .rz-cell-filter-content {
        display: flex;
        justify-content: center
    }

    .rz-data-grid {
        height: 100%;
    }
</style>