@using DivvyUp_Shared.AppConstants
@using DivvyUp_Shared.Dtos.Entity
@using DivvyUp_Shared.Enums
@using DivvyUp_App.BaseComponents.DLoadingPanel

<DLoadingPanel IsLoading="@IsLoading"/>
<RadzenDataGrid @ref="@Grid"
                Data="@Loans"
                TItem="LoanDto"
                AllowSorting="true"
                AllowAlternatingRows="true"
                FilterMode="FilterMode.Simple"
                AllowFiltering="true"
                LogicalFilterOperator="LogicalFilterOperator.Or"
                AllowPaging="true"
                PagerAlwaysVisible="true"
                PageSize="10"
                PageSizeOptions="@PageSizeOptions"
                PagerHorizontalAlign="HorizontalAlign.Center"
                ShowPagingSummary="true"
                EditMode="DataGridEditMode.Single"
                GridLines="DataGridGridLines.Both">
    <HeaderTemplate>
        <div style="display: flex; align-items: center; flex-wrap: wrap; gap: 10px;">
            <RadzenButton ButtonStyle="ButtonStyle.Light" Icon="refresh" Text="Odśwież" Click="@LoadGrid"/>
            @if (!ShowAllLoans && GridMode == LoanGridMode.All)
            {
                <RadzenDatePicker TValue="DateOnly" Value="@DateFrom" ValueChanged="@(async (DateOnly date) => { DateFrom = date; await SaveSettingsToLocalStorage(); })" Name="Data od" DateFormat="@Format.DateFormat"/>
                <RadzenDatePicker TValue="DateOnly" Value="@DateTo" ValueChanged="@(async (DateOnly date) => { DateTo = date; await SaveSettingsToLocalStorage(); })" Name="Data do" DateFormat="@Format.DateFormat"/>
                <RadzenButton ButtonStyle="ButtonStyle.Light" Icon="calendar_month" Text="Obecny miesiąc" Click="@(async () => await SetCurrentMonth())"/>
            }
            <RadzenButton Style="position: absolute; right: 10px;" ButtonStyle="@(ShowAllLoans ? ButtonStyle.Success : ButtonStyle.Danger)" Icon="attach_money" Text="Pokaż wszystkie pożyczki" Click="@(async () => { ShowAllLoans = !ShowAllLoans; await SaveSettingsToLocalStorage(); await LoadGrid(); })" Visible="@(GridMode == LoanGridMode.All)"/>
        </div>
    </HeaderTemplate>
    <EmptyTemplate>
        <p style="color: lightgrey; font-size: 24px; text-align: center; margin: 2rem;">Brak wpisów</p>
    </EmptyTemplate>
    <Columns>
        <RadzenDataGridColumn Title="Zarządzanie" Width="12%" TextAlign="TextAlign.Center" Frozen="true" Sortable="false">
            <HeaderTemplate>
                <RadzenButton Icon="add_circle" ButtonStyle="ButtonStyle.Success" Click="@InsertRow" />
            </HeaderTemplate>
            <Template Context="loan">
                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Secondary" Click="@((args) => EditRow(loan))"/>
                <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Click="@((args) => RemoveRow(loan))"/>
            </Template>
            <EditTemplate Context="loan">
                <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Click="@((args) => SaveRow(loan))"/>
                <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Danger" Click="@(async (args) => await CancelEdit(loan))"/>
            </EditTemplate>
            <FilterTemplate>
                <div class="rz-cell-data">
                    <RadzenButton Icon="filter_alt_off" ButtonStyle="ButtonStyle.Dark" Click="@(args => { Grid.Reset(); })"/>
                </div>
            </FilterTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="@nameof(LoanDto.Settled)" Title="Rozliczono" Width="10%" TextAlign="TextAlign.Center" Frozen="true">
            <Template Context="loan">
                <RadzenCheckBox class="grid-button" @bind-Value="@loan.Settled" Change="@(async (bool Check) => await ChangeSettled(loan.Id, loan.Settled))" />
            </Template>
            <EditTemplate Context="loan">
                <RadzenCheckBox style="opacity: 0.6; " class="grid-button" Value="@loan.Settled" ReadOnly="true" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="@nameof(LoanDto.Date)" Title="Data" Width="20%" TextAlign="TextAlign.Start" Frozen="true" FilterMode="FilterMode.SimpleWithMenu" >
            <Template Context="loan">
                <div style="@(loan.Settled ? Format.IsSettledStyle : Format.IsNotSettledStyle);">
                    @loan.Date.ToString(Format.DateFormat)
                </div>
            </Template>
            <EditTemplate Context="loan">
                <RadzenDatePicker @bind-Value="@loan.Date" ShowCalendarWeek DateFormat="@Format.DateFormat" Style="width: 100%;" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="@nameof(LoanDto.Lent)" Title="Pożyczka" Width="10%" TextAlign="TextAlign.Center" Frozen="true">
            <Template Context="loan">
                <RadzenButton ButtonStyle="@(loan.Lent ? ButtonStyle.Danger : ButtonStyle.Success)" 
                              Icon="@(loan.Lent ? "attach_money south_west" : "attach_money north_east")" 
                              Click="@(async () => await ChangeLent(loan.Id, !loan.Lent))"
                              Style="width: 100%;"
                              Disabled="true" />
            </Template>
            <EditTemplate Context="loan">
                <RadzenButton ButtonStyle="@(loan.Lent ? ButtonStyle.Danger : ButtonStyle.Success)"
                              Icon="@(loan.Lent ? "attach_money south_west" : "attach_money north_east")"
                              Style="width: 100%;"
                              Click="@(() => { loan.Lent = !loan.Lent; })" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="@nameof(LoanDto.Amount)" Title="Kwota" Width="12%" TextAlign="TextAlign.Start" Frozen="true">
            <Template Context="loan">
                <div style="@(loan.Settled ? Format.IsSettledStyle : Format.IsNotSettledStyle); @(loan.Lent ? Format.IsLentBalanceLoanStyle : Format.IsNotLentBalanceLoanStyle)">
                    <b>@loan.Amount.ToString((Format.PriceFormat))</b>
                </div>
            </Template>
            <EditTemplate Context="loan">
                <RadzenNumeric @bind-Value="@loan.Amount" Style="width: 100%;" Format="@Format.PriceFormat" Min="0" />
            </EditTemplate>
        </RadzenDataGridColumn>
        @if (GridMode == LoanGridMode.All)
        {
            <RadzenDataGridColumn Property="@nameof(LoanDto.PersonId)" Title="Osoba" Width="25%" TextAlign="TextAlign.Center" Frozen="true">
                <Template Context="loan">
                    <RadzenDropDownDataGrid TValue="int"
                                            Value="@loan.PersonId"
                                            ValueChanged="async (int personId) => await OnPersonChange(loan, personId)"
                                            Data="@Persons"
                                            TextProperty="@nameof(PersonDto.FullName)"
                                            ValueProperty="@nameof(PersonDto.Id)" />
                </Template>
                <EditTemplate Context="loan">
                    @{
                        if (Persons != null && Persons.Count > 0 && loan.PersonId == 0)
                        {
                            loan.PersonId = Persons.First().Id;
                        }
                    }
                    <RadzenDropDownDataGrid
                        TValue="int"
                        @bind-Value="loan.PersonId"
                        Data="@Persons"
                        TextProperty="@nameof(PersonDto.FullName)"
                        ValueProperty="@nameof(PersonDto.Id)"/>
                </EditTemplate>
            </RadzenDataGridColumn>            
        }
    </Columns>
</RadzenDataGrid>