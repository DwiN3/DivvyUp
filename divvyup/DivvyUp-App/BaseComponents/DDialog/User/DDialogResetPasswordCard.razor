@using DivvyUp_App.Services.Gui
@using DivvyUp_Shared.Dtos.Request
@using DivvyUp_Shared.Interfaces
@inject DialogService DialogService

<div class="content-dialog">
    <RadzenTemplateForm TItem="ChangePasswordUserDto" Data="@ChangePasswordRequest" Submit="@OnSubmit" InvalidSubmit="@OnInvalidSubmit" >
        <RadzenStack>
            <div class="section">
                <b class="name-section">Aktualne hasło</b>
                <RadzenPassword class="section-input" @bind-Value="@ChangePasswordRequest.Password" Name="Password"/>
            </div>
            <RadzenRequiredValidator Component="Password" Text="Aktualne hasło jest wymagane" Style="margin-top: -10px; background: white;" Popup="false" />
            <RadzenCustomValidator Component="Password" Text="Hasła nie mogą być takie same" Validator="() => ChangePasswordRequest.Password.Equals(ChangePasswordRequest.NewPassword)" Style="margin-top: -10px; background: white;" Popup="false" />
        </RadzenStack>
        <RadzenStack>
            <div class="section">
                <b class="name-section">Nowe hasło</b>
                <RadzenPassword class="section-input" @bind-Value="@ChangePasswordRequest.NewPassword" Name="NewPassword" />
            </div>
            <RadzenLengthValidator Component="NewPassword" Min="8" Max="16" Text="Hasło musi się składać z 8 - 15 liter " Style="margin-top: -10px; background: white;" Popup="false" />
            <RadzenCustomValidator Component="NewPassword" Validator="@(() => ValidateOneUpperLetter(ChangePasswordRequest.NewPassword))" Text="Hasło musi zawierać jedną dużą literę" Style=" margin-top: -10px; background: white;" Popup="false" />
            <RadzenCustomValidator Component="NewPassword" Validator="@(() => ValidateOneSpecialCharacter(ChangePasswordRequest.NewPassword))" Text="Hasło musi zawierać jeden znak specjalny" Style="margin-top: -10px; background: white;" Popup="false" />
            <RadzenCustomValidator Component="NewPassword" Validator="@(() => ValidateOneNumber(ChangePasswordRequest.NewPassword))" Text="Hasło musi zawierać jedną liczbę" Style="margin-top: -10px; background: white;" Popup="false" />
        </RadzenStack>
    </RadzenTemplateForm>
</div>
<footer class="footer">
    <RadzenButton Text="Zmień hasło" Style="margin-right: 8px;" ButtonStyle="ButtonStyle.Success" ButtonType="ButtonType.Submit" />
    <RadzenButton Text="Anuluj" ButtonStyle="ButtonStyle.Danger" Click="@(() => DialogService.Close())" />
</footer>

@code {
    [Inject]
    private IUserService UserService { get; set; }
    [Inject]
    private DNotificationService DNotificationService { get; set; }

    private ChangePasswordUserDto ChangePasswordRequest = new();

    private async Task ResetPassword()
    {
        try
        {
            await UserService.ChangePassword(ChangePasswordRequest);
            DNotificationService.ShowNotification("Pomyślnie zmieniono hasło", NotificationSeverity.Success);
            DialogService.Close(true);
        }
        catch (Exception)
        {
            DNotificationService.ShowNotification("Nie udało się zmienić hasła", NotificationSeverity.Error);
        }
    }

    void OnSubmit(ChangePasswordUserDto model)
    {
        ResetPassword();
    }

    void OnInvalidSubmit(FormInvalidSubmitEventArgs args)
    {
            
    }

    bool ValidateOneUpperLetter(string password)
    {
        return password.Any(char.IsUpper);
    }
    bool ValidateOneSpecialCharacter(string password)
    {
        const string specialCharacters = "!@#$%^&*()-_=+[]{}|;:'\",.<>?/`~";
        return password.Any(ch => specialCharacters.Contains(ch));
    }
    bool ValidateOneNumber(string password)
    {
        const string numbers = "0123456789";
        return password.Any(ch => numbers.Contains(ch));
    }
}

<style>
    .rz-dialog-content {
        display: flex;
        flex-direction: column;
        min-height: 120px;
        width: 596px;
    }

    .content-dialog {
        justify-content: center;
        flex-grow: 1;
        padding: 16px;
        width: 100%;
    }

    .footer {
        display: flex;
        flex-direction: row;
        justify-content: flex-end;
        padding: 10px;
        background-color: #f0f0f0;
        width: 100%;
    }

    .rz-dialog-content {
        padding: 2px;
    }

    .section {
        display: flex;
        flex-direction: row;
        align-items: center;
        margin-bottom: 10px;
    }

    .name-section {
        width: 25%;
        font-weight: bold;
    }

    .section-input {
        width: 75%;
    }
</style>