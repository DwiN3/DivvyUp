@using DivvyUp_Shared.AppConstants
@using DivvyUp_Shared.Dto

<RadzenDataGrid @ref="@Grid"
                Data="@PersonProducts"
                TItem="PersonProductDto"
                AllowSorting="true"
                AllowAlternatingRows="true"
                FilterMode="FilterMode.Simple"
                AllowFiltering="true"
                LogicalFilterOperator="LogicalFilterOperator.Or"
                AllowPaging="true"
                PagerAlwaysVisible="true"
                PageSize="5"
                PageSizeOptions="@PageSizeOptions"
                PagerHorizontalAlign="HorizontalAlign.Center"
                ShowPagingSummary="true"
                EditMode="DataGridEditMode.Single"
                GridLines="DataGridGridLines.Both">
    <HeaderTemplate>
        <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle" Text="Przypisz osobę" Click="@InsertRow" />
        <RadzenButton ButtonStyle="ButtonStyle.Light" Icon="refresh" Text="Odśwież" Click="@LoadGrid" />
    </HeaderTemplate>
    <Columns>
        <RadzenDataGridColumn Title="Zarządzanie" Width="15%" TextAlign="TextAlign.Center" Frozen="true">
            <Template Context="personProduct">
                <RadzenButton class="button" Icon="edit" ButtonStyle="ButtonStyle.Secondary" Click="@((args) => EditRow(personProduct))" />
                <RadzenButton class="button" Icon="delete" ButtonStyle="ButtonStyle.Danger" Click="@((args) => RemoveRow(personProduct))" />
            </Template>
            <EditTemplate Context="personProduct">
                <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Click="@((args) => SaveRow(personProduct))" />
                <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Danger" Click="@((args) => CancelEdit(personProduct))" />
            </EditTemplate>
            <FilterTemplate>
                <RadzenButton class="button" Icon="filter_alt_off" ButtonStyle="ButtonStyle.Dark" Click="@(args => { Grid.Reset(); })" />
            </FilterTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="@nameof(PersonProductDto.settled)" Title="Rozliczono" Width="15%" TextAlign="TextAlign.Center" Frozen="true">
            <Template Context="personProduct">
                <RadzenCheckBox class="button" @bind-Value="@personProduct.settled" Change="@(async (bool check) => await ChangeSettled(personProduct.id, personProduct.settled))" />
            </Template>
            <EditTemplate Context="personProduct">
                <RadzenCheckBox style="opacity: 0.6; " class="button" Value="@personProduct.settled" ReadOnly="true" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="@nameof(PersonProductDto.compensation)" Title="Wyrównanie" Width="15%" TextAlign="TextAlign.Center" Frozen="true">
            <Template Context="personProduct">
                <RadzenCheckBox class="button" @bind-Value="@personProduct.compensation" Change="@(async (bool check) => await ChangeCompensation(personProduct.id))"/>
            </Template>
            <EditTemplate Context="personProduct">
                <RadzenCheckBox style="opacity: 0.6; " class="button" Value="@personProduct.compensation" ReadOnly="true" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="@nameof(PersonProductDto.quantity)" Title="Ilośc" Width="15%" TextAlign="TextAlign.Center" Frozen="true">
            <Template Context="personProduct">
                @($"{personProduct.quantity}/{Product.maxQuantity}")
            </Template>
            <EditTemplate Context="personProduct">
                @if (personProduct.quantity == 0)
                {
                    personProduct.quantity = CountLastPart(personProduct.id);
                }
                <RadzenNumeric @bind-Value="@personProduct.quantity" Min="1" Max="CountLastPart(personProduct.id)" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="@nameof(PersonProductDto.partOfPrice)" Title="Cena" Width="15%" TextAlign="TextAlign.Center" Frozen="true">
            <Template Context="personProduct">
                @personProduct.partOfPrice.ToString(Format.PriceFormat)
            </Template>
            <EditTemplate Context="personProduct">
                -
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="@nameof(PersonProductDto.personId)" Title="Osoba" Width="25%" TextAlign="TextAlign.Center" Frozen="true">
            <Template Context="personProduct">
                <RadzenDropDownDataGrid TValue="int"
                                        Value="@personProduct.personId"
                                        ValueChanged="async (int personId) => await OnPersonChange(personProduct, personId)"
                                        Data="@Persons"
                                        TextProperty="@nameof(PersonDto.fullName)"
                                        ValueProperty="@nameof(PersonDto.id)" />
            </Template>
            <EditTemplate Context="personProduct">
                @{
                    if (Persons != null && Persons.Count > 0 && personProduct.personId == 0)
                    {
                        personProduct.personId = Persons.First().id;
                    }
                }
                <RadzenDropDownDataGrid
                    TValue="int"
                    @bind-Value="personProduct.personId"
                    Data="@Persons"
                    TextProperty="@nameof(PersonDto.fullName)"
                    ValueProperty="@nameof(PersonDto.id)"/>
            </EditTemplate>
        </RadzenDataGridColumn>

    </Columns>
</RadzenDataGrid>
                
<style>
    .button {
        width: 36px;
        height: 36px;
    }

    .rz-cell-filter-content {
        display: flex;
        justify-content: center
    }

    .rz-data-grid {
        height: 100%;
    }
</style>
